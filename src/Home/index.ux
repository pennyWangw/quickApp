<template>
    <!-- template里只能有一个根节点 -->
    <div class="demo-page">
        <text class="top-title">{{new Date(year).getFullYear()}}</text>
        <div class="date-check" onclick="routeDetail"><text>查看基础体温</text></div>
        <div class="desk" onclick="$app.$def.showMenu()"><text class="blue">!</text></div>
        <list id="alist" class="content-page" onscrolltop="getDatas">
            <list-item class="month-div" type="product" for="month in allDays" onappear="getCurYear(month.month)">
                <div class="month-num item-text">
                    <text>{{new Date(month.month).getMonth() + 1}}月</text>
                </div>
                <div class="week-div">
                    <div for="weekDay in week" class="item-text">
                        <text>{{weekDay}}</text>
                    </div>
                </div>
                <div class="week-div flex-wrap">
                    <div for="(index, day) in month.day"
                         class="item-text {{(haveChooseDay(day.day) && day.curMonth) ? (getChooseDay(day.day).isPeriod ? 'period-day' : 'choosename') : ''}}"
                         onclick="getCurDay(day, index)"
                         onlongpress="showRecord(day)">
                        <text class="{{day.curMonth ? '' : 'lightgray'}}">{{new Date(day.day).getDate()}}</text>
                    </div>
                </div>
            </list-item>
        </list>
        <div class="out-pop" if="{{showPop}}">
            <div class="center-pop">
                <div class="close-cont">
                    <div class="close" onclick="closePop()">
                        <text class="close-text">x</text>
                    </div>
                </div>
                <text class="center-text">{{clickDay.day}}</text>
                <div class="content-pop">
                    <div class="row-inline">
                        <text>体温:</text>
                        <input value="{{clickDay.tempValue}}" onchange="enterkeyclick" class="input-class" maxlength="5"/>
                    </div>
                    <text if="{{showTemPo}}" class="worn-text">请输入34.00 - 42.00的数字！</text>
                    <div class="row-inline">
                        <text>生活:</text>
                        <input checked="{{clickDay.sexLife}}" type="checkbox" onchange="changeSex" maxlength="5"/>
                        <picker type="time" value="{{clickDay.sexTime}}" class="picker" onchange="chooseTime"></picker>
                    </div>
                    <div class="row-inline">
                        <text>经期:</text>
                        <input checked="{{clickDay.isPeriod}}" type="checkbox" onchange="changePeriod" maxlength="5"/>
                    </div>
                    <div class="margin-left-pop">
                        <input id="radio1" type="radio" value="量多" name="period"  checked="{{clickDay.periodNum==='量多'}}" onchange="changeRadio"/><label target="radio1">量少</label>
                        <input id="radio2" type="radio" value="量正常" name="period" checked="{{clickDay.periodNum==='量正常'}}" onchange="changeRadio"/><label target="radio2">普通</label>
                        <input id="radio3" type="radio" value="量少" name="period" checked="{{clickDay.periodNum==='量少'}}" onchange="changeRadio"/><label target="radio3">量多</label>
                    </div>
                    <div class="row-inline">
                        <text class="title-area">备注:</text>
                        <textarea class="text-are" onchange="getText" value="{{clickDay.otherText}}"></textarea>
                    </div>
                    <div class="row-inline right-algn">
                        <text class="btn" onclick="closePop">取消</text>
                        <text class="btn certain" onclick="sureAdd">确定</text>
                    </div>
                </div>

            </div>
        </div>
    </div>
</template>

<script>
  import router from '@system.router'
  import storage from '@system.storage'

  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    private: {
      title: '示例页面',
      week: ['一', '二', '三', '四', '五', '六', '日'],
      year: new Date(),
      allDays: [],
      choosedDays: [],
      showPop: false,
      clickDay: {
        day: '',
        tempValue: null,
        sexLife: false,
        sexTime: '请选择时间',
        isPeriod: false,
        periodNum: '',
        otherText: ''
      },
      showTemPo: false,
      dayIndex: -1
    },
    onInit() {
      this.getChooseDayStor()
      let date = new Date()
      let curDate = `${date.getFullYear()}-${date.getMonth() + 1}-01`
      this.getMounth(curDate)
      // console.log(curDate)
      let nextDate = new Date(curDate)
      nextDate.setMonth(nextDate.getMonth() - 1)
      this.getMounth(`${nextDate.getFullYear()}-${nextDate.getMonth() + 1}-01`)
    },
    onShow() {
      setTimeout(() => {
        this.$element('alist').scrollTo({index: 1})
      }, 100)
    },
    showRecord(day) {

    },
    getChooseDayStor() {
      storage.get({
        key: 'penny.chooseDay',
        success: (data) => {
          if (data) {
            console.log('storage.get', data)
            this.choosedDays = JSON.parse(data)
          }
          // this.choosedDays = data
        },
        fail: (data, code) => {
          // this.choosedDays = []
        }
      })
    },
    setChooseDayStor(data) {
      storage.set({
        key: 'penny.chooseDay',
        value: data,
        success: function (data) {
          console.log('storage.get', data)
          console.log('handling success')
        },
        fail: function (data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
    },
    getMounth(day) {
      let monthObject = {
        month: day,
        day: []
      }
      let date = new Date(day)
      let firstDay = date.getDay()
      firstDay = firstDay === 0 ? 7 : firstDay
      for (let i = 1; i < firstDay; i++) {
        let day1 = new Date(date)
        day1.setDate(day1.getDate() - i)
        monthObject.day.unshift({
          curMonth: false,
          day: this.dateFormat(day1)
        })
      }
      date.setMonth(date.getMonth() + 1)
      date.setDate(date.getDate() - 1)
      let haveDays = date.getDate()
      for (let j = 0; j < haveDays; j++) {
        let day2 = new Date(day)
        day2.setDate(day2.getDate() + j)
        monthObject.day.push({
          curMonth: true,
          day: this.dateFormat(day2)
        })
      }
      let lastDay = date.getDay()
      // console.log(lastDay + 'day' + this.dateFormat(date))
      if (lastDay !== 0) {
        for (let k = 1; k < (7 - lastDay + 1); k++) {
          let day3 = new Date(date)
          day3.setDate(day3.getDate() + k)
          monthObject.day.push({
            curMonth: false,
            day: this.dateFormat(day3)
          })
        }
      }
      this.allDays.unshift(monthObject)
    },
    dateFormat(date) {
      let day = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`
      return day
    },
    getDatas() {
      let month = new Date(this.allDays[0].month)
      month.setMonth(month.getMonth() - 1)
      this.year = month
      this.getMounth(this.dateFormat(month))
    },
    getCurYear(event) {
      this.year = event
    },
    sureAdd () {
      let haveDay = false
      for (let i = 0; i < this.choosedDays.length; i++) {
        let curChooseDay = this.choosedDays[i]
        if (curChooseDay.day === this.clickDay.day) {
          this.choosedDays[i] = this.clickDay
          haveDay = true
          break
        }
      }
      if (!haveDay) {
        this.choosedDays.push(this.clickDay)
      }
      // this.allDays[this.dayIndex] = this.clickDay
      // console.log(this.allDays[this.dayIndex])
      this.choosedDays = this.choosedDays.sort((a, b) => {
        return new Date(a.day) - new Date(b.day)
      })
      // console.log(this.choosedDays)
      this.setChooseDayStor(this.choosedDays)
      this.closePop()
    },
    getCurDay(day, index) {
      this.dayIndex = index
      if (day.curMonth) {
        for (let i = 0; i < this.choosedDays.length; i++) {
          let curChooseDay = this.choosedDays[i]
          if (curChooseDay.day === day.day) {
            this.clickDay = curChooseDay
            break
          }
        }
        if (!this.clickDay.day) {
          this.clickDay.day = day.day
          this.clickDay.curMonth = day.curMonth
        }
        // console.log(this.clickDay)
        // this.choosedDays.push(day)
        this.showPop = true
      }

    },
    closePop() {
      this.showPop = false
      this.clickDay = {
        day: '',
        tempValue: null,
        sexLife: false,
        sexTime: '请选择时间',
        isPeriod: false,
        periodNum: '',
        otherText: ''
      }
      this.dayIndex = -1
    },
    enterkeyclick (e) {
      // console.log(34 < e.value)
      if (!(34 < e.value && e.value < 42)) {
        this.showTemPo = true
      } else {
        this.showTemPo = false
        this.clickDay.tempValue = e.value
      }
    },
    changeRadio (e) {
      this.clickDay.periodNum = e.value
      // console.log(e)
    },
    changeSex (e) {
      this.clickDay.sexLife = e.checked
    },
    changePeriod (e) {
      // console.log(e)
      this.clickDay.isPeriod = e.checked
    },
    chooseTime (val) {
      this.clickDay.sexTime = (val.hour < 10 ? ('0' + val.hour) : val.hour) + ':' + (val.minute < 10 ? ('0' + val.minute) : val.minute)
    },
    getText (e) {
      this.clickDay.otherText = e.text
    },
    haveChooseDay (day) {
      return this.choosedDays.some((item) => {
        return item.day === day
      })
    },
    getChooseDay (day) {
      let chooseDay
      this.choosedDays.some((item) => {
        if (item.day === day) {
          chooseDay = item
        }
        return item.day === day
      })
      return chooseDay
    },
    routeDetail() {
      // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
      router.push({
        uri: '/Detail'
      })
    }
  }
</script>

<style>
    .demo-page {
        /*position: relative;*/
        flex-direction: column;
        text-align: center;
    }

    .top-title {
        position: fixed;
        left: 0;
        top: 0;
        font-size: 40px;
        text-align: center;
        line-height: 100px;
        height: 100px;
        background: linear-gradient(#FFAEB9, #ffffff);
        color: #2E2E2E;
        width: 100%;
    }

    .content-page {
        margin-top: 100px;
        width: 100%;
        padding: 0 15px;
        height: 100%;
    }

    .month-div {
        width: 100%;
        flex-direction: column;
        align-items: center;
    }

    .week-div {
        align-items: center;
        flex-direction: row;
        justify-content: center;
        width: 100%;
    }

    .item-text {
        margin: 14px;
        width: 70px;
        text-align: center;
        height: 70px;
    }

    .item-text text {
        width: 100%;
        text-align: center;
    }

    .flex-wrap {
        flex-wrap: wrap;
    }

    .choosename {
        background-color: #FFE4E1;
        border-radius: 35px;
    }
    .period-day{
        background-color: #FFAEB9;
        border-radius: 35px;
    }

    .lightgray {
        color: #cccccc;
    }

    .out-pop {
        position: fixed;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6);
        top: 0;
        left: 0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .center-pop {
        width: 70%;
        height: 70%;
        background-color: #ffffff;
        border-radius: 10px;
        padding: 15px;
        flex-direction: column;
    }
    .worn-text{
        color: #EE6AA7;
        margin-left: 90px;
        font-size: 24px;
    }

    .close-cont {
        width: 100%;
        justify-content: flex-end;
    }

    .close {
        width: 40px;
        height: 40px;
        border-radius: 20px;
        justify-content: center;
        /*align-content: center;*/
        border: 2px solid #EE6AA7;
    }

    .close-text {
        color: #EE6AA7;
        font-size: 26px;
        margin-top: -5px;
    }
    .center-text{
        align-self: center;
    }
    .content-pop{
        padding: 0 30px;
        flex-direction: column;
    }
    .input-class{
        border: 2px solid #FFC0CB;
        border-radius: 8px;
        font-size: 36px;
        margin-left: 15px;
        padding: 6px 20px;
        color: #EE6AA7;
        width: 80%;
    }
    .margin-left-pop{
        margin-left: 70px;
        flex-direction: row;
        align-self: flex-start;
        margin-bottom: 20px;
    }
    .mask-class{
        mask-color: rgba(0,0,0,1)
    }
    .right-input{
        flex-direction: column;
    }
    .row-inline{
        flex-direction: row;
        margin-top: 20px;
    }
    .picker{
        width: 200px;
        /*border: 2px solid #EE6AA7;*/
        border-radius: 10px;
        color: #FFAEB9;
        padding: 0px 20px;
    }
    .text-are{
        width: 80%;
        border: 2px solid #FFC0CB;
        border-radius: 8px;
        margin-left: 15px;
        padding: 6px 20px;
        font-size: 28px;
        height: 300px;
        background-color: #FFFdFd;
    }
    .title-area{
        align-self: flex-start;
    }
    .right-algn{
        justify-content: flex-end;
        align-self: flex-end;
    }
    .btn{
        width: 120px;
        text-align: center;
        border: 2px solid #FFC0CB;
        line-height: 45px;
        border-radius: 20px;
        margin: 20px;
    }
    .certain{
        background-color: #FFAEB9;
    }
    .date-check{
        position: fixed;
        width: 200px;
        height: 70px;
        right: 30px;
        top: 15px;
        display: flex;
        justify-content: center;
        border: 1px solid #EE6AA7;
        border-radius: 8px;
        /*background-color: #000000;*/
    }
    .desk{
        position: fixed;
        top: 15px;
        left: 15px;
        height: 70px;
        width: 70px;
        border-radius: 35px;
        border:1px solid #87CEFA;
        justify-content: center;
        color: #87CEFA;
    }
    .blue{
        color: #87CEFA;
    }
</style>
