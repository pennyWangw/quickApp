<template>
  <!-- template里只能有一个根节点 -->
  <div class="demo-page">
    <text class="top-title">{{new Date(year).getFullYear()}}</text>
    <list id="alist" class="content-page" onscrolltop="getDatas">
      <list-item class="month-div" type="product" for="month in allDays" onappear="getCurYear(month.month)">
        <div class="month-num item-text"><text>{{new Date(month.month).getMonth() + 1}}月</text></div>
        <div class="week-div"><div for="weekDay in week" class="item-text"><text>{{weekDay}}</text></div></div>
        <div class="week-div flex-wrap"><div for="day in month.day" class="item-text {{choosedDays.indexOf(day) > -1 ? 'choosename' : ''}}" onclick="getCurDay(day)"><text>{{new Date(day).getDate()}}</text></div></div>
      </list-item>
    </list>

  </div>
</template>
<style>
  .demo-page {
    /*position: relative;*/
    flex-direction: column;
    text-align: center;
  }

  .top-title {
    position: fixed;
    left: 0;
    top: 0;
    font-size: 40px;
    text-align: center;
    line-height: 100px;
    height: 100px;
    background: linear-gradient(#FFAEB9, #ffffff);
    color: #2E2E2E;
    width: 100%;
  }

  .content-page {
    margin-top: 100px;
    width: 100%;
    padding: 0 15px;
    height: 100%;
  }
  .month-div{
    width: 100%;
    flex-direction: column;
    align-items: center;
  }
  .week-div{
    align-items: center;
    flex-direction: row;
    justify-content: center;
    width: 100%;
  }
  .item-text{
    margin: 14px;
    width: 70px;
    text-align: center;
    height: 70px;
  }
  .item-text text{
    width: 100%;
    text-align: center;
  }
  .flex-wrap{
    flex-wrap: wrap;
  }
  .choosename{
    background-color: #FFAEB9;
    border-radius: 35px;
  }
</style>

<script>
  import router from '@system.router'

  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    private: {
      title: '示例页面',
      week: ['一', '二', '三', '四', '五', '六', '日'],
      year: new Date(),
      allDays: [],
      choosedDays: []
    },
    onInit () {
      let date = new Date()
      let curDate = `${date.getFullYear()}-${date.getMonth() + 1}-01`
      this.getMounth(curDate)
      date.setMonth(date.getMonth() - 1)
      this.getMounth(`${date.getFullYear()}-${date.getMonth() + 1}-01`)
    },
    onShow () {
      setTimeout(() => {
        this.$element('alist').scrollTo({index:1})
      }, 100)
    },
    getMounth (day) {
      let monthObject = {
        month: day,
        day: []
      }
      let date = new Date(day)
      let firstDay = date.getDay()
      firstDay = firstDay === 0 ? 7 : firstDay
      console.log(firstDay + 'day' + this.dateFormat(date))
      for (let i = 1; i < firstDay; i++) {
        let day1 = new Date(date)
        day1.setDate(day1.getDate() - i)
        monthObject.day.unshift(this.dateFormat(day1))
      }
      date.setMonth(date.getMonth() + 1)
      date.setDate(date.getDate() - 1)
      let haveDays = date.getDate()
      for (let j = 0; j < haveDays; j++) {
        let day2 = new Date(day)
        day2.setDate(day2.getDate() + j)
        monthObject.day.push(this.dateFormat(day2))
      }
      let lastDay = date.getDay()
      for (let k = 1; k < (7 - lastDay + 1); k++) {
        let day3 = new Date(date)
        day3.setDate(day3.getDate() + k)
        monthObject.day.push(this.dateFormat(day3))
      }
      this.allDays.unshift(monthObject)
    },
    dateFormat (date) {
      let day = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`
      return day
    },
    getDatas () {
      let month = new Date(this.allDays[0].month)
      month.setMonth(month.getMonth() - 1)
      this.year = month
      this.getMounth(this.dateFormat(month))
    },
    getCurYear (event) {
      this.year = event
    },
    getCurDay (day) {
      this.choosedDays.push(day)
    },
    routeDetail () {
      // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
      router.push ({
        uri: '/Detail'
      })
    }
  }
</script>
